/*
* PID3piLineFollower - demo code for the Pololu 3pi Robot
*
* This code will follow a black line on a white background, using a
* PID-based algorithm.
*
* http://www.pololu.com/docs/0J21
* http://www.pololu.com
* http://forum.pololu.com
*
*/
// The following libraries will be needed by this demo
#include <Pololu3pi.h>
#include <PololuQTRSensors.h>
#include <OrangutanMotors.h>
#include <OrangutanAnalog.h>
#include <OrangutanLEDs.h>
#include <OrangutanLCD.h>
#include <OrangutanPushbuttons.h>
#include <OrangutanBuzzer.h>
Pololu3pi robot;
unsigned int sensors[5]; // an array to hold sensor values
unsigned int last_proportional = 0;
long integral = 0;
// This include file allows data to be stored in program space. The
// ATmega168 has 16k of program space compared to 1k of RAM, so large
// pieces of static data should be stored in program space.
#include <avr/pgmspace.h>
// Introductory messages. The "PROGMEM" identifier causes the data to
// go into program space.
const char welcome_line1[] PROGMEM = " Pololu";
const char welcome_line2[] PROGMEM = "3\xf7 Robot";
const char demo_name_line1[] PROGMEM = "PID Line";
const char demo_name_line2[] PROGMEM = "follower";
// A couple of simple tunes, stored in program space.
const char welcome[] PROGMEM = ">g32>>c32";
const char go[] PROGMEM = "L16 cdegreg4";
OrangutanLCD lcd; //lcd is initialised
OrangutanMotors Motors; //motors are initialised
#define filter_size 101 //used for buffer
int buffer[filter_size] = {}; //buffer array
int count = 0; //counter for buffer
int sensorL=6; //setting sensor ports and sensor values
int sensorR=7;
int valueL;
int valueR;
int maxL=850; //setting max and min values for ldr voltages
int minL=20;
int maxR=750;
int minR=15;
int a; //counter for function B
int b;
int newMin=1000; //creating values to be mapped
int newMax=0; // max and min are flipped to make readings more comprehensive
//values for filtering the accelerometer values using a median buffer
int unfiltered_value;
int filtered_value;
int data;
// Data for generating the characters used in load_custom_characters
// and display_readings. By reading levels[] starting at various
// offsets, we can generate all of the 7 extra characters needed for a
// bargraph. This is also stored in program space.
const char levels[] PROGMEM = {
0b00000,
0b00000,
0b00000,
0b00000,
0b00000,
0b00000,
0b00000,
0b11111,
0b11111,
0b11111,
0b11111,
0b11111,
0b11111,
0b11111
};

// This function loads custom characters into the LCD. Up to 8
// characters can be loaded; we use them for 7 levels of a bar graph.
void load_custom_characters()
{
OrangutanLCD::loadCustomCharacter(levels + 0, 0); // no offset, e.g. one bar
OrangutanLCD::loadCustomCharacter(levels + 1, 1); // two bars
OrangutanLCD::loadCustomCharacter(levels + 2, 2); // etc...
OrangutanLCD::loadCustomCharacter(levels + 3, 3);
OrangutanLCD::loadCustomCharacter(levels + 4, 4);
OrangutanLCD::loadCustomCharacter(levels + 5, 5);
OrangutanLCD::loadCustomCharacter(levels + 6, 6);
OrangutanLCD::clear(); // the LCD must be cleared for the characters to take effect
}

// This function displays the sensor readings using a bar graph.
void display_readings(const unsigned int *calibrated_values)
{
unsigned char i;
for (i=0;i<5;i++) {
// Initialize the array of characters that we will use for the
// graph. Using the space, an extra copy of the one-bar
// character, and character 255 (a full black box), we get 10
// characters in the array.
const char display_characters[10] = { ' ', 0, 0, 1, 2, 3, 4, 5, 6, 255 };
// The variable c will have values from 0 to 9, since
// calibrated values are in the range of 0 to 1000, and
// 1000/101 is 9 with integer math.
char c = display_characters[calibrated_values[i] / 101];
// Display the bar graph character.
OrangutanLCD::print(c);
}
}

// Initializes the 3pi, displays a welcome message, calibrates, and
// plays the initial music. This function is automatically called
// by the Arduino framework at the start of program execution.
void setup()
{
OrangutanBuzzer::playFromProgramSpace(go); //buzzer plays to signify course start
delay(3000); //waits for 3 seconds to allow user to move hand away from robot
lightfollow();//calls light follower function to begin task
delay(2000);//waits 2 seconds to allow torch to be moved away
Motors.setSpeeds(-50,50);//rotates left to account for facing away from the line
delay(500);
Motors.setSpeeds(0,0);
delay(1000);//waits a second before following line
unsigned int counter; // used as a simple timer
// This must be called at the beginning of 3pi code, to set up the
// sensors. We use a value of 2000 for the timeout, which
// corresponds to 2000*0.4 us = 0.8 ms on our 20 MHz processor.
pololu_3pi_init_disable_emitter_pin(2000);
load_custom_characters(); // load the custom characters
// Play welcome music and display a message
OrangutanLCD::printFromProgramSpace(welcome_line1);
OrangutanLCD::gotoXY(0, 1);
OrangutanLCD::printFromProgramSpace(welcome_line2);
OrangutanBuzzer::playFromProgramSpace(welcome);
delay(1000);
OrangutanLCD::clear();
OrangutanLCD::printFromProgramSpace(demo_name_line1);
OrangutanLCD::gotoXY(0, 1);
OrangutanLCD::printFromProgramSpace(demo_name_line2);
delay(1000);
// Always wait for the button to be released so that 3pi doesn't
// start moving until your hand is away from it.
delay(1000);
// Auto-calibration: turn right and left while calibrating the
// sensors.
for (counter=0; counter<80; counter++)
{
if (counter < 20 || counter >= 60)
OrangutanMotors::setSpeeds(40, -40);
else
OrangutanMotors::setSpeeds(-40, 40);
// This function records a set of sensor readings and keeps
// track of the minimum and maximum values encountered. The
// IR_EMITTERS_ON argument means that the IR LEDs will be
// turned on during the reading, which is usually what you
// want.
robot.calibrateLineSensors(IR_EMITTERS_ON);
// Since our counter runs to 80, the total delay will be
// 80*20 = 1600 ms.
delay(20);
}
OrangutanMotors::setSpeeds(0, 0);
// Display calibrated values as a bar graph.
// Read the sensor values and get the position measurement.
unsigned int position = robot.readLine(sensors, IR_EMITTERS_ON);
// Display the position measurement, which will go from 0
// (when the leftmost sensor is over the line) to 4000 (when
// the rightmost sensor is over the line) on the 3pi, along
// with a bar graph of the sensor readings. This allows you
// to make sure the robot is ready to go.
OrangutanLCD::clear();
OrangutanLCD::print(position);
OrangutanLCD::gotoXY(0, 1);
display_readings(sensors);
delay(100);
OrangutanLCD::clear();
OrangutanLCD::print("Go!");
// Play music and wait for it to finish before we start driving.
OrangutanBuzzer::playFromProgramSpace(go);
while(OrangutanBuzzer::isPlaying());
delay(500);
unfiltered_value = analogRead(5); //initial values for accelerometer are read in
filtered_value = median_filter(unfiltered_value); //these values are filtered in a median array
}

// The main function. This function is repeatedly called by
// the Arduino framework. Begins line follow and then balances the see-saw
void loop()
{
unfiltered_value = analogRead(5); //new values are continually read in and fed to the median filter
filtered_value = median_filter(unfiltered_value);
if((data < 615)){ //median filter returns variable data, if this exceeds a certain point robot knows it's
now on the see-saw
// Get the position of the line. Note that we must provide
// the "sensors" argument to read_line() here, even though we
// are not interested in the individual sensor readings.
unsigned int position = robot.readLine(sensors, IR_EMITTERS_ON);
// The "proportional" term should be 0 when we are on the line.
int proportional = (int)position - 2000;
// Compute the derivative (change) and integral (sum) of the
// position.
int derivative = proportional - last_proportional;
integral += proportional;
// Remember the last position.
last_proportional = proportional;
// Compute the difference between the two motor power settings,
// m1 - m2. If this is a positive number the robot will turn
// to the right. If it is a negative number, the robot will
// turn to the left, and the magnitude of the number determines
// the sharpness of the turn. You can adjust the constants by which
// the proportional, integral, and derivative terms are multiplied to
// improve performance.
int power_difference = proportional/20 + integral/10000 + derivative*3/2;
// Compute the actual motor settings. We never set either motor
// to a negative value.
const int maximum = 50;
if (power_difference > maximum)
power_difference = maximum;
if (power_difference < -maximum)
power_difference = -maximum;
if (power_difference < 0)
OrangutanMotors::setSpeeds(maximum + power_difference, maximum);
else
OrangutanMotors::setSpeeds(maximum, maximum - power_difference);
}
else{//once if is broken the robot is stopped for a moment
stopRobot();
delay(500);
balance();//balance is a function to level out the see saw
}
}

void balance(){
Motors.setSpeeds(50,50);//robot moves forward for half a second to move near to the middle of the
see-saw
delay(500);//this saves time
stopRobot();
OrangutanBuzzer::playFromProgramSpace(go);//buzzer is played to indicate next task
lcd.clear();
lcd.print("begin balance!");//this is printed to screen to show that this function is entered
delay(1000);
for(a=0; a<500; a++){//loop is begin with an arbitrarily large number of attempts, should not take
more than 500 to complete balance
delay(300);
unfiltered_value = analogRead(5);
filtered_value = median_filter(unfiltered_value); //values are initialised and this code is looped to
fill array
//it then filters the array from smallest to largest to find the median, this median then should dictate
what angle the robot is at
if(filtered_value < 603){//the robot reverses if it is angled forward then pauses for new readings
Motors.setSpeeds(-40,-40);
delay(100);
stopRobot();
}
else if(filtered_value > 611){//the robot drives forward if angled on a incline
Motors.setSpeeds(40,40);
delay(100);
stopRobot();
}
else{//if the robot detects a stable inclination then it pauses and allows time to balance
stopRobot();
OrangutanBuzzer::playFromProgramSpace(go);//buzzer plays to signify end of tasks
lcd.clear();
lcd.print("stable");//printed to screen when see-saw is balanced
delay(10000);//long pause to make sure of balance
}
}
stopRobot();//robot is stopped to allow user to pick it up
delay(1000);
}
int median_filter(int value)
{
boolean swapped = true; // set to true to be used later
int temp, i, j = 0;
int median_buffer[filter_size] = {}; //temp buffer to be sorted later
//values are shifted left as new values enter
for (i=0; i <= filter_size - 2; i++) //the filter -2 means that array limits are not exceeded when
moving values
{
buffer[i] = buffer[i+1]; //move values one place left
}
buffer[filter_size - 1] = value; //puts new values into the right
if (count < filter_size) //fills the array before anything else happens
{
count++;
return value; //returns value inputed for now
}
else //when buffer is full, sorts values from low to high
{
//copy contents of buffer into a new temp array called median_buffer
for(i = 0; i < filter_size; i++)
{
median_buffer[i] = buffer[i];
}
while(swapped) //while sorting takes place, swapped will remain true and will be looped
{
swapped = false; //when for loop no longer executes swapped will remain false and while loop
broken
j++;
for(i = 0; i < (filter_size - 1) - j; i++) //loop moves lower values left in the array to sort low to high
{
if (median_buffer[i] > median_buffer[i+1]) //moves left only if the value to the left is larger
{
temp = median_buffer[i]; //temp is used to save the value being replaced
median_buffer[i] = median_buffer[i+1]; //the lower value is saved to the left
median_buffer[i+1] = temp; //the larger value saved in temp now replaces the original space of
lower value
swapped = true; //when true the while loop is repeated
}
}
}
data=median_buffer[filter_size/2];
return data; //this is the median value we want taken from the array
}
}

//this command is used to callibrate sensor values to a comprehensive and comparable scale
void FuncCval()
{
valueL=analogRead(sensorL); // reads left ldr voltage
getLeftLDRCalibrated(); //maps sensor value to new scale
valueR=analogRead(sensorR); //reads right ldr voltage
getRightLDRCalibrated(); //maps sensor value to new scale
}

//this function maps the sensors for left ldr
void getLeftLDRCalibrated()
{
valueL=map(valueL, minL, maxL, newMin, newMax); //puts ldr value on scale from 0-1000
}

//this function maps thet sensors for right ldr
void getRightLDRCalibrated()
{
valueR=map(valueR, minR, maxR, newMin, newMax); //puts right ldr value on scale from 0-1000
}

//this is the main body of the light follower function
void lightfollow()
{
for(a=0; a<20; a++){ //a loop is initialised here to begin reading values and moving accordingly, the
number of loops isnt very important
FuncCval(); //the sensors are first read here to see are the parameters for the while loop met
while((valueL < 825) && (valueR < 825)){ //this while loop will be effective to break out of the
loop once the bot has reached the light
FuncCval(); //sensor values are now read each time the while loop begins and these values will
dictate what way the robot moves
if (valueL > (valueR+80))
{
rotateToLeft(); //this if statement will turn the robot left if the left ldr detects more light
}
else if(valueR > (valueL+80))
{
rotateToRight(); //this if statement turns the robot right if the right ldr detects more light
}
else
{
goForward(); //if both ldrs are roughly equal then the robot will proceed towards the light for a
moment
}
}
// if the while loop parameters are still met the loop will continue until it detects a certain light
intensity
stopRobot();
break;
//if the light intensity is met and the while loop broken the robot will stop on the spot and the for
loop will then finish counting and exit this function
delay(20);
}
}

//this is the rotate left function
void rotateToLeft()
{
Motors.setSpeeds(0,50); //if the left statement is needed the motor on the left motor will activate for
a brief moment
delay(100);
Motors.setSpeeds(0,0);
delay(50);
}

//this is the rotate right function
void rotateToRight()
{
Motors.setSpeeds(50,0); //if the right statement is needed the motor on the right motor will activate
for a brief moment
delay(100);
Motors.setSpeeds(0,0);
delay(50);
}

//this function moves the robot straight forward
void goForward()
{
Motors.setSpeeds(50,50); //if the forward statement is needed both motors will activate for a second
delay(200);
Motors.setSpeeds(0,0);
delay(50);
}

//if the while loop is broken this function stops the robot on the spot
void stopRobot()
{
Motors.setSpeeds(0,0);
delay(100);
}
